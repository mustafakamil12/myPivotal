#check if the cf working on ur computer
cf --version
cf help
cf help | grep "service"

#get help for specific command
cf api --help
cf api -h

# create org - admin user rights needed
cf create-org <new org name>
# note: it will not recreate the org, just gives a warning if it exists

# Creating a space
# Login
# select the org from the list presented
cf create-space <space name>

# target the space
cf target -o <org name> -s <space name>

# list the spaces - the org has to be targeted first from command above
cf spaces

# Creating a user
# login as admin
# Select org from list presented
cf create-user <username> <password>

# roles
# roles are predefined in PCF
# Org level: OrgManager BillingManager OrgAuditor
# Space level: SpaceManager SpaceDeveloper SpaceAuditor

# adding a org role to a user
# Login as admin
# select org shown from list
cf set-org-role <user> <org name> <Role from org level list>

# adding a space role to a user
# login as admin
# select org
cf set-space-role <user> <org name> <space name> <Role from space level list>

# creating service
cf create-service <SERVICE_NAME> <PLAN> <INSTANCE_NAME>

# list services running
cf services

# get detail for specific service
cf service <service Name>

# bind service to an app
cf bind-service <APP_Name> <SERVICE_INSTANCE>

# to see enviroment variables 
cf env <APP_NAME>

# list buildpacks installed
cf buildpacks

# specify specific build pack with push command
cf push <MY_APP> -b binary_buildpack

# specify github url for buildpack
cf push <MY_APP> -b <github url>

# 
cf push -c ".\application"

# to clear app and re-deploy it again
cf push -c "null"

# deplpy app with a different name
cf push <NEW-APP-NAME>

# to restart app, it will target the droplet, will be used if there's a service binded for the first time, update to the enviroment variable.
cf restart <APP-NAME>

# if we need to recompile the drop let, used when there's change to the enviroment variable.
cf restage <APP-NAME>

# if we have different yaml file need to be used instead of manifest.yml
cf push -f <path-to-manifest-file>

# if we need to ignor the manifest file we can use parameters
cf push <APP-NAME> [<PARM1>...<PARM2>] --no-manifest

# List the available stacks
cf stacks

# monitoring
cf apps

# to see health and status of your app.
cf app <app to monitor>

# view logs
cf logs <app> --recent
# to tail logs drop --recent - ctrl-c to exit

# scaling

# list scaling information
cf scale <app>

# change number of instances
cf scale <app> -i 2

# instances / memory / disk
cf scale <app> -i 2 -k 256M -m 256M

# run a task
cf run-task <APP_NAME> <COMMAND> [--name <TASK_NAME>]
cf run-task <app> "ls -al" --name my-ls

# to list all tasks for specific app
cf tasks <APP-NAME>

# list domains
cf domains

# create/delete http shared domain
cf create-shared-domain <domain_name>
cf delete-shared-domain <domain_name>

# to retrieve the list of router groups
cf router-groups

# create/delete tcp shared domain
cf create-shared-domain <DOMAIN-NAME> --router-group <ROUTER GROUP NAME>
cf delete-shared-domain <DOMAIN-NAME> --router-group <ROUTER GROUP NAME>

# create http private domain
cf create-domain <ORG-NAME> <PRIVATE_DOMAIN_NAME>

# create http sub private domain
cf create-domain <ORG-NAME> <SUB.PRIVATE_DOMAIN_NAME>


# list env variables
cf env <app name>

# How to compile and deploy the spring-music app
git clone https://github.com/cloudfoundry-samples/spring-music

cd spring-music
gradlew clean assemble
cf push --hostname spring-music

